# CUDA를 지원하는 Ubuntu 20.04 이미지를 기본으로 사용
FROM nvidia/cuda:11.1.1-cudnn8-devel-ubuntu20.04 AS base


ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Seoul
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

ENV NVIDIA_DRIVER_CAPABILITIES=${NVIDIA_DRIVER_CAPABILITIES},compute,display

SHELL [ "/bin/bash", "--login", "-c" ]

#install libs first
RUN apt-get update -q && \
    apt-get install -q -y \
    sudo \
    wget \
    python3.8-dev \
    python3-pip \
    python3.8-tk \
    git \
    ninja-build \
    rclone \
    ffmpeg libsm6 libxext6 libglib2.0-0 libsm6 libxrender-dev libxext6 \
    bash-completion \
    tree \
    iputils-ping \
    net-tools \
    vim

RUN echo '# enable programmable completion features (you don'"'"'t need to enable' >> /etc/bash.bashrc && \
    echo '# this, if it'"'"'s already enabled in /etc/bash.bashrc and /etc/profile' >> /etc/bash.bashrc && \
    echo '# sources /etc/bash.bashrc).' >> /etc/bash.bashrc && \
    echo 'if ! shopt -oq posix; then' >> /etc/bash.bashrc && \
    echo '  if [ -f /usr/share/bash-completion/bash_completion ]; then' >> /etc/bash.bashrc && \
    echo '    . /usr/share/bash-completion/bash_completion' >> /etc/bash.bashrc && \
    echo '  elif [ -f /etc/bash_completion ]; then' >> /etc/bash.bashrc && \
    echo '    . /etc/bash_completion' >> /etc/bash.bashrc && \
    echo '  fi' >> /etc/bash.bashrc && \
    echo 'fi' >> /etc/bash.bashrc

FROM base AS uniad

# To fix GPG key error when running apt-get update
RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub
RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub


# intall pytorch
ENV TORCH_CUDA_ARCH_LIST="6.0 6.1 7.0 7.5 8.0+PTX"
ENV TORCH_NVCC_FLAGS="-Xfatbin -compress-all"
ENV PATH=${PATH}:/usr/local/cuda:/usr/local/cuda/bin
RUN pip install torch==1.9.1+cu111 torchvision==0.10.1+cu111 torchaudio==0.9.1 -f https://download.pytorch.org/whl/torch_stable.html

RUN pip uninstall -y \
        numpy \
        scikit-image \
        pandas \
        matplotlib \
        shapely \
        setuptools \
        urllib3

RUN pip install --no-cache-dir \
        numpy==1.20.0 \
        scikit-image==0.19.3 \
        pandas==1.4.4 \
        matplotlib==3.6 \
        shapely==1.8.5.post1 \
        setuptools==59.5.0 \
        scikit-learn \
        pyquaternion \
        cachetools \
        descartes \
        future \
        tensorboard \
        IPython

# Install MMCV-series
ENV CUDA_HOME=/usr/local/cuda
ENV FORCE_CUDA="1"

RUN git clone -b v1.4.0 --single-branch --depth 1 https://github.com/open-mmlab/mmcv.git /mmcv-full && \
    cd /mmcv-full && MMCV_WITH_OPS=1 pip install --no-cache-dir -v -e .

# MMDetection stage
RUN git clone -b v2.14.0 --single-branch --depth 1 https://github.com/open-mmlab/mmdetection.git /mmdetection && \
    cd /mmdetection && pip install --no-cache-dir -v -e .

# MMSegmentation stage
RUN git clone -b v0.14.1 --single-branch --depth 1 https://github.com/open-mmlab/mmsegmentation.git /mmsegmentation && \
    cd /mmsegmentation && pip install --no-cache-dir -v -e .

# MMDetection3D stage
RUN pip install scipy==1.7.3 scikit-image==0.20.0 && \
    git clone -b v0.17.1 --single-branch --depth 1 https://github.com/open-mmlab/mmdetection3d.git /mmdetection3d && \
    cd /mmdetection3d && pip install --no-cache-dir -v -e .

RUN git clone --depth 1 https://github.com/OpenDriveLab/UniAD.git /UniAD && \
    cd /UniAD && pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir --force-reinstall \
    pillow==10.3.0 \
    yapf==0.40.1 \
    numpy==1.20.0

# We need this old version of torchmetrics to run UniAD...
RUN pip install torchmetrics==0.8.2


# Link python to python3
RUN ln /usr/bin/python3 /usr/bin/python

ENV PATH=/usr/local/bin:$PATH
ENV PYTHONPATH=$PYTHONPATH:/usr/local/lib/python3.8/dist-packages:/mmcv-full:/mmdetection:/mmsegmentation:/mmdetection3d:/UniAD

RUN chmod -R 755 /mmcv-full /mmdetection /mmsegmentation /mmdetection3d /UniAD

# For s3utils
RUN pip install --upgrade pip
RUN pip install \
    boto3 \
    aioboto3 \
    boto \
    pytest-asyncio

# For pytorch distributed utils
RUN pip install \
    paramiko \
    scp 
    
RUN apt-get install -y \
    sshpass

RUN pip install --force-reinstall pandas==1.4.4 numpy==1.20
    
WORKDIR /


FROM uniad AS jupyter

# Jupyter 설치
ARG NVFUSER_BUILD_VERSION=d0bb811
ARG TARGETARCH=amd64
ARG PYVER=3.10
ARG L4T=0
ENV NVM_DIR=/usr/local/nvm
ENV NODE_VERSION=16.20.2
ENV PATH $NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH

RUN apt-get update -q && \
    apt-get install -y -q \
        python3 \
        python3-pip \
        npm \
        curl \
        rsyslog
    
RUN git config --global url."https://github".insteadOf git://github && \
    pip install --no-cache-dir notebook==6.4.10 jupyterlab==2.3.2 python-hostlist traitlets==5.9.0


# Jupyter 확장 및 Node.js 설치
RUN pip install --disable-pip-version-check --no-cache-dir git+https://github.com/cliffwoolley/jupyter_tensorboard.git@0.2.0+nv21.03 && \
    mkdir -p $NVM_DIR && \
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash && \
    chmod +x $NVM_DIR/nvm.sh && \
    source "$NVM_DIR/nvm.sh" && \
    nvm install $NODE_VERSION && \
    jupyter labextension install jupyterlab_tensorboard && \
    jupyter serverextension enable jupyterlab && \
    pip install --no-cache-dir jupytext && \
    jupyter labextension install jupyterlab-jupytext@1.2.2 && \
    (cd /usr/local/share/jupyter/lab/staging && npm prune --production) && \
    npm cache clean --force && \
    rm -rf /usr/local/share/.cache && \
    echo "source $NVM_DIR/nvm.sh" >> /etc/bash.bashrc && \
    echo 'export NVM_DIR="/usr/local/nvm"' > /etc/profile.d/nvm.sh && \
    echo 'source $NVM_DIR/nvm.sh' >> /etc/profile.d/nvm.sh && \
    echo 'source $NVM_DIR/bash_completion' >> /etc/profile.d/nvm.sh && \
    chmod +x /etc/profile.d/nvm.sh && \
    mv /root/.jupyter/jupyter_notebook_config.json /usr/local/etc/jupyter/ && \
    jupyter lab clean

RUN pip install --no-cache-dir --upgrade ipywidgets

# Jupyter 포트 설정
ENV JUPYTER_PORT=8888
ENV TENSORBOARD_PORT=6006

FROM jupyter AS hkmc

# For AIP

############### apt repository setting##############
RUN rm -f /etc/apt/sources.list.d/* && \
    echo "Acquire::https::Verify-Peer "false";" > /etc/apt/apt.conf.d/80-ssl-exceptions && \
    echo "Acquire::https::Verify-Host "false";" >> /etc/apt/apt.conf.d/80-ssl-exceptions && \
    echo "deb [arch=amd64] https://nexus.hmc.co.kr/repository/apt-ubuntu-focal/ focal main restricted multiverse universe" > /etc/apt/sources.list && \
    echo "deb [arch=amd64] https://nexus.hmc.co.kr/repository/apt-ubuntu-focal/ focal-updates main restricted multiverse universe" >> /etc/apt/sources.list && \
    echo "deb [arch=amd64] https://nexus.hmc.co.kr/repository/apt-ubuntu-focal/ focal-security main restricted multiverse universe" >> /etc/apt/sources.list && \
    echo "deb [arch=amd64] https://nexus.hmc.co.kr/repository/apt-ubuntu-focal/ focal-backports main restricted multiverse universe" >> /etc/apt/sources.list && \
    echo "deb [arch=arm64] https://nexus.hmc.co.kr/repository/apt-ubuntu-port-focal/ focal main restricted multiverse universe" >> /etc/apt/sources.list.d/arm-cross-compile-sources.list && \
    echo "deb [arch=arm64] https://nexus.hmc.co.kr/repository/apt-ubuntu-port-focal/ focal-updates main restricted multiverse universe" >> /etc/apt/sources.list.d/arm-cross-compile-sources.list && \
    echo "deb [arch=arm64] https://nexus.hmc.co.kr/repository/apt-ubuntu-port-focal/ focal-security main restricted multiverse universe" >> /etc/apt/sources.list.d/arm-cross-compile-sources.list && \
    echo "deb [arch=arm64] https://nexus.hmc.co.kr/repository/apt-ubuntu-port-focal/ focal-backports main restricted multiverse universe" >> /etc/apt/sources.list.d/arm-cross-compile-sources.list && \
    apt-get update -q

############### pip repository setting##############
RUN echo "[global]" > /etc/pip.conf && \
    echo "trusted-host = nexus.hmc.co.kr" >> /etc/pip.conf && \
    echo "timeout = 6000" >> /etc/pip.conf && \
    echo "" >> /etc/pip.conf && \
    echo "[install]" >> /etc/pip.conf && \
    echo "index-url = https://nexus.hmc.co.kr/repository/pypi-proxy/simple/" >> /etc/pip.conf && \
    echo "" >> /etc/pip.conf && \
    echo "[search]" >> /etc/pip.conf && \
    echo "index-url = https://nexus.hmc.co.kr/repository/pypi-proxy/pypi" >> /etc/pip.conf
    
############### ldap package install & setting##############
RUN apt-get update && \
    apt-get -yq install libnss-ldap libpam-ldap ldap-utils nscd openssh-server && \
    echo "session required pam_mkhomedir.so skel=/etc/skel umask=007" >> /etc/pam.d/common-session && \
    sed -i "s/^passwd:.*/passwd: compat ldap/g" /etc/nsswitch.conf && \
    sed -i "s/^group:.*/group: compat ldap/g" /etc/nsswitch.conf && \
    sed -i "s/^shadow:.*/shadow: compat ldap/g" /etc/nsswitch.conf && \
    echo "base dc=hpc,dc=com" > /etc/ldap.conf && \
    echo "uri ldap://ai-ldap.hmc.co.kr" >> /etc/ldap.conf && \
    echo "ldap_version 3" >> /etc/ldap.conf && \
    echo "binddn cn=Manager,dc=hpc,dc=com" >> /etc/ldap.conf && \
    echo "bindpw secret" >> /etc/ldap.conf && \
    echo "pam_password md5" >> /etc/ldap.conf && \
    mkdir -p /var/run/sshd && \
    sed -ri 's/^#?PermitEmptyPasswords\s+.*/PermitEmptyPasswords yes/' /etc/ssh/sshd_config && \
    sed -ri 's/^#?PermitRootLogin\s+.*/PermitRootLogin yes/' /etc/ssh/sshd_config && \
    echo "PermitUserEnvironment yes" >> /etc/ssh/sshd_config && \
    echo "Port 1111" >> /etc/ssh/sshd_config && \
    echo 'root:1234' | chpasswd

RUN echo "ClientAliveInterval 60" >> /etc/ssh/sshd_config && \
    echo "ClientAliveCountMax 10" >> /etc/ssh/sshd_config && \
    echo "X11Forwarding yes" >> /etc/ssh/sshd_config && \
    echo "X11DisplayOffset 10" >> /etc/ssh/sshd_config && \
    echo "X11UseLocalhost no" >> /etc/ssh/sshd_config
    
# JupyterLab Git, JupyterHub, LDAP 인증 설치
ARG JUPYTERLAB_GIT_VERSION=0.24.0 \
    JUPYTERHUB_VERSION=1.5.0 \
    LDAPAUTH_VERSION=1.3.0


RUN pip install --upgrade pip && \
    pip install tornado==6.2 protobuf==3.20.3 SQLAlchemy==1.4.46 \
                jupyterlab-git==${JUPYTERLAB_GIT_VERSION} \
                jupyterhub==${JUPYTERHUB_VERSION} \
                jupyterhub-ldapauthenticator==${LDAPAUTH_VERSION} && \
    npm config set registry "https://nexus.hmc.co.kr/repository/npm-public/" && \
    jlpm config set registry "https://nexus.hmc.co.kr/repository/npm-public/" && \
    npm install -g configurable-http-proxy && \
    mkdir -p /etc/jupyterhub && \
    echo "c.JupyterHub.authenticator_class = 'ldapauthenticator.LDAPAuthenticator'" > /etc/jupyterhub/jupyterhub_config.py && \
    echo "c.LDAPAuthenticator.server_address = 'ldap://ai-ldap.hmc.co.kr'" >> /etc/jupyterhub/jupyterhub_config.py && \
    echo "c.LDAPAuthenticator.valid_username_regex = '^[0-9A-Za-z][.a-z0-9_-]*$'" >> /etc/jupyterhub/jupyterhub_config.py && \
    echo "c.LDAPAuthenticator.bind_dn_template = ['uid={username},ou=users,dc=hpc,dc=com']" >> /etc/jupyterhub/jupyterhub_config.py && \
    echo "c.Spawner.default_url = '/lab'" >> /etc/jupyterhub/jupyterhub_config.py && \
    echo "c.Spawner.environment = {'LD_LIBRARY_PATH': '$LD_LIBRARY_PATH'}" >> /etc/jupyterhub/jupyterhub_config.py && \
    jupyter lab build && \
    chmod 777 /home
    

# rsyslog 설정
RUN sed -i 's/*.*;auth,authpriv.none/*.*/g' /etc/rsyslog.d/50-default.conf && \
    echo "*.* -/proc/1/fd/1" >> /etc/rsyslog.d/dockerlog.conf && \
    sed -i 's/PrivDropToUser syslog/PrivDropToUser root/g' /etc/rsyslog.conf && \
    sed -i 's/PrivDropToGroup syslog/PrivDropToGroup root/g' /etc/rsyslog.conf && \
    echo "export PROMPT_COMMAND='RETRN_VAL=\$?;logger -p local1.debug \"PREV_CMD_STAT=\$RETRN_VAL, PID=\$\$, PWD=\$PWD, CMD=\$(history 1 | sed \"s/^[ ]*[0-9]\\+[ ]*//\" )\"'" >> /etc/bash.bashrc && \
    echo "local1.debug /var/log/cmd.log" > /etc/rsyslog.d/cmdlog.conf



RUN echo "#!/bin/bash" >> /etc/jupyterhub/start_jupyterhub.sh
RUN echo "source /usr/local/nvm/nvm.sh" >> /etc/jupyterhub/start_jupyterhub.sh
RUN echo "exec jupyterhub -f /etc/jupyterhub/jupyterhub_config.py --debug" >> /etc/jupyterhub/start_jupyterhub.sh
RUN chmod +x /etc/jupyterhub/start_jupyterhub.sh


# 환경 변수 설정
RUN echo "export PATH=$PATH:$(env|grep -w PATH=|sed 's/PATH=//' -)" >> /etc/profile
RUN echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(env|grep -w LD_LIBRARY_PATH=|sed 's/LD_LIBRARY_PATH=//' -)" >> /etc/profile